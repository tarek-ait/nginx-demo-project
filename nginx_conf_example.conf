# steps to install nginx on windows
# go to this url  : https://nginx.org/en/docs/windows.html
# install the latest mainline version, the one with the known and fixed bugs
# extract the zip folder and place it where you want
# update the nginx.config file with your own configurations
# run the nginx.exe file on the same directory 
# if you are using powershell you need to specify it with the absolute path



# here is the nginx.config file example followed by some notes and explanations for this configuration and nginx in genral 


# configuring nginx to become a load balancer to the three applications
worker_processes 1; # controles how many paralle processes nginx spawns to handle client requests
# instead of using a new process for every incoming connection, nginx uses worker
# processes to handle any connections using single-threded event loop.
#  the number represents the number of worker processes nginx should create.
#  each worker process runs independently and can its own set of connections.
# this configuration directly influences how well it can handle traffic (performance).
# should be tuned according to the server's hardware cpu cores and expected traffic load.
# it is recommeneded to set the number of worker processes equal to the number of cpu cores. which allows nginx to efficiently uses all cpu cores.
# we can set it to the value auto, to let nginx determine the optimal number of processes based on the system's resources.

# now we define for each worker process how many simulations connections can be opened.
events {
    worker_connections 1024; 
}
#  the higher the value the more requests can be handled
#  increases memory usage.
# it cannot exceed the current limit on the max number of open files.

# here we define how to handle http requests.
# which is a configuration specific to http and affecting all virtual servers.
http{
    # when nginx returns a response to the client, it can include the file types in the response to the client.
    # we need to tell nginx to include the corresponding MIME types in the "content-type" response header, when sending a file.
    # and this is important so that the browser or the http client unerstant how to process or to render the response.
    include mime.types; # mime.types is actually a file that nginx uses to map file extension to MIME types.

    # define the upstream as a seperate configuration
    # list all the servers that nodejs should forward to. ie the server that nginx will load balance to.
    # we can also define the logic to how nginx should distribute the requests among the servers.
    # by default, nginx uses round-robin algorithm to distribute the requests, which means it will send requests to each server in a cyclic manner.
    # we can also use other algorithms like least connections, ip_hash, etc.

    upstream nodejs_cluster {
        least_conn;
        server 127.0.0.1:3000;
        server 127.0.0.1:3001;
        server 127.0.0.1:3002;
    }

    # ther server block defines how nginx should handle requests for a particular domain or IP address.
    # how to listen for connections
    # which domain or subdomains the configuration applies to.
    # how to route the requests
    server {
        listen 8080; # the ip address and port on which th eserver will accept requests
        server_name localhost; # which domain or ip address this server block should respon to.
        location / { # the root url, will apply to all requests unless more specific location blocks are defined.
            # here we dinfe what nginx should do with the incoming requests.
            # we want to route the requests to the three backend application.
            # an upstrea block, which refers to servers that nginx forwars requestt to 
            # upstream name was based on the flow of the data.
            # upstream servers refers to traffic going from a client toward the source or higher-level infra, in this case application server.
            # downstrem servers refers to traffic going back to the client 
            proxy_pass  http://nodejs_cluster; # refrence to the upstream block. and we can also add a protocol 
            proxy_set_header Host $host; # to be sent to the backend 
            proxy_set_header X-Real-IP $remote_addr; # to be sent to the backend application.
        }
        # now we want to forward info from the original client requests to the backend servers.
    }
}

# when nginx acts as a reverse proxy, the requests coming to hte backend servers orginiate from nginx not directly from the client.
# as a result, backen servers would see the ip address of the nginx server as source of the request.


# MIME refers to Multipurpose Internet Mail Extensions.
# it is a standard that extends the format of email, allowing for the inclusion of various types of files.
# MIME types are used to specify the type of data being transferred, such as text, image, audio, or video.
# they are used to ensure that the correct application is used to open or process the file.

# the actual instructions or commands that tell nginx what to do are called directives.
# groups of related directives that apply a certain part of the configuration are called context.

# now we run it and test it.
# by running the command nginx;
